---
description: 
globs: 
alwaysApply: false
---
# UI Components Guide

## shadcn/ui Component Library
This project uses shadcn/ui components based on Radix UI primitives. All UI components are located in [src/components/ui/](mdc:src/components/ui).

## Available Components
The project includes a comprehensive set of UI components:

### Layout & Navigation
- [Card](mdc:src/components/ui/card.tsx) - Used extensively for content containers
- [Sheet](mdc:src/components/ui/sheet.tsx) - Side panels and drawers
- [Sidebar](mdc:src/components/ui/sidebar.tsx) - Navigation sidebar
- [Tabs](mdc:src/components/ui/tabs.tsx) - Used in main dashboard
- [Navigation Menu](mdc:src/components/ui/navigation-menu.tsx)
- [Breadcrumb](mdc:src/components/ui/breadcrumb.tsx)
- [Separator](mdc:src/components/ui/separator.tsx)

### Form Controls
- [Button](mdc:src/components/ui/button.tsx) - Primary interaction element
- [Input](mdc:src/components/ui/input.tsx) - Text input fields
- [Form](mdc:src/components/ui/form.tsx) - Form wrapper with validation
- [Checkbox](mdc:src/components/ui/checkbox.tsx)
- [Radio Group](mdc:src/components/ui/radio-group.tsx)
- [Select](mdc:src/components/ui/select.tsx)
- [Switch](mdc:src/components/ui/switch.tsx)
- [Slider](mdc:src/components/ui/slider.tsx)
- [Textarea](mdc:src/components/ui/textarea.tsx)
- [Input OTP](mdc:src/components/ui/input-otp.tsx)

### Data Display
- [Badge](mdc:src/components/ui/badge.tsx) - Status indicators and tags
- [Table](mdc:src/components/ui/table.tsx) - Data tables
- [Chart](mdc:src/components/ui/chart.tsx) - Chart components for data visualization
- [Progress](mdc:src/components/ui/progress.tsx) - Progress indicators
- [Avatar](mdc:src/components/ui/avatar.tsx) - User avatars
- [Calendar](mdc:src/components/ui/calendar.tsx) - Date picker

### Interactive Components
- [Dialog](mdc:src/components/ui/dialog.tsx) - Modal dialogs
- [Alert Dialog](mdc:src/components/ui/alert-dialog.tsx) - Confirmation dialogs
- [Drawer](mdc:src/components/ui/drawer.tsx) - Bottom drawer
- [Popover](mdc:src/components/ui/popover.tsx) - Floating content
- [Tooltip](mdc:src/components/ui/tooltip.tsx) - Hover information
- [Hover Card](mdc:src/components/ui/hover-card.tsx) - Rich hover content
- [Command](mdc:src/components/ui/command.tsx) - Command palette
- [Dropdown Menu](mdc:src/components/ui/dropdown-menu.tsx)
- [Context Menu](mdc:src/components/ui/context-menu.tsx)
- [Menubar](mdc:src/components/ui/menubar.tsx)

### Feedback & Status
- [Toast](mdc:src/components/ui/toast.tsx) - Success/error notifications
- [Toaster](mdc:src/components/ui/toaster.tsx) - Toast container
- [Sonner](mdc:src/components/ui/sonner.tsx) - Alternative toast system
- [Alert](mdc:src/components/ui/alert.tsx) - Static alerts
- [Skeleton](mdc:src/components/ui/skeleton.tsx) - Loading placeholders

### Advanced Components
- [Carousel](mdc:src/components/ui/carousel.tsx) - Image/content carousels
- [Collapsible](mdc:src/components/ui/collapsible.tsx) - Expandable content
- [Accordion](mdc:src/components/ui/accordion.tsx) - FAQ-style content
- [Scroll Area](mdc:src/components/ui/scroll-area.tsx) - Custom scrollbars
- [Resizable](mdc:src/components/ui/resizable.tsx) - Resizable panels
- [Toggle](mdc:src/components/ui/toggle.tsx) & [Toggle Group](mdc:src/components/ui/toggle-group.tsx)
- [Pagination](mdc:src/components/ui/pagination.tsx) - Page navigation

## Component Usage Patterns

### Card Pattern (Primary Layout)
```tsx
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";

<Card className="border-0 shadow-lg">
  <CardHeader>
    <CardTitle>Title</CardTitle>
    <CardDescription>Description</CardDescription>
  </CardHeader>
  <CardContent>
    {/* Content */}
  </CardContent>
</Card>
```

### Button Variants
- Primary: `<Button>Click me</Button>`
- Secondary: `<Button variant="secondary">Secondary</Button>`
- Outline: `<Button variant="outline">Outline</Button>`
- Ghost: `<Button variant="ghost">Ghost</Button>`

### Form Pattern
```tsx
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";

// Use with React Hook Form + Zod validation
```

## Custom Hooks
- [use-toast](mdc:src/hooks/use-toast.ts) - Toast notifications
- [use-mobile](mdc:src/hooks/use-mobile.tsx) - Mobile detection

## Styling with cn()
Always use the `cn()` utility from [src/lib/utils.ts](mdc:src/lib/utils.ts) for conditional classes:
```tsx
import { cn } from "@/lib/utils";

<div className={cn("base-classes", conditional && "conditional-classes")} />
```


