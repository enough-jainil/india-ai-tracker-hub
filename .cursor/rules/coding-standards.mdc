---
description: 
globs: 
alwaysApply: false
---
# Coding Standards & Best Practices

## TypeScript Guidelines
- Use strict TypeScript configuration as defined in [tsconfig.json](mdc:tsconfig.json)
- Always define proper types and interfaces
- Avoid using `any` type - use `unknown` or proper type definitions
- Use type assertions sparingly and prefer type guards
- Export types and interfaces from component files when reusable

## React Component Guidelines
- Use functional components with hooks (no class components)
- Follow the component pattern used in [src/pages/Index.tsx](mdc:src/pages/Index.tsx):
  ```tsx
  const ComponentName = () => {
    // hooks and state
    // handlers
    // render logic
    return JSX;
  };
  export default ComponentName;
  ```
- Use React Query for data fetching as shown in [App.tsx](mdc:src/App.tsx)
- Implement proper error boundaries and loading states
- Use React.memo() for expensive components when appropriate

## Styling Guidelines
- **Primary**: Use Tailwind CSS classes for styling
- **Components**: Use shadcn/ui components from [src/components/ui/](mdc:src/components/ui)
- **Utilities**: Use the `cn()` function from [src/lib/utils.ts](mdc:src/lib/utils.ts) for conditional classes
- **Colors**: Stick to the gradient theme (blue to purple) established in the design
- **Responsive**: Always implement mobile-first responsive design
- **Animations**: Use Tailwind animations and CSS transitions for smooth UX

## File Organization
- **Components**: Place reusable components in [src/components/](mdc:src/components)
- **Pages**: Place route components in [src/pages/](mdc:src/pages)
- **Hooks**: Place custom hooks in [src/hooks/](mdc:src/hooks)
- **Types**: Define types either inline or in separate `.types.ts` files
- **Constants**: Define constants at the top of files or in separate files

## Import Guidelines
- Use absolute imports with `@/` alias for src directory
- Group imports: React, third-party libraries, local components, types
- Use default exports for main components
- Use named exports for utilities and hooks

## State Management
- Use React Query for server state management
- Use React hooks (useState, useReducer) for local component state
- Pass data down through props, avoid prop drilling with context when needed
- Keep state as close to where it's used as possible

## Error Handling
- Implement proper error boundaries
- Use React Query error handling for API calls
- Show user-friendly error messages using toast notifications
- Log errors appropriately for debugging

## Performance
- Use React.memo() for expensive re-renders
- Implement lazy loading for route components
- Optimize images and assets
- Use React Query caching effectively
- Minimize bundle size with proper imports

