---
description:
globs:
alwaysApply: false
---
# Component Architecture

## Main Application Components

### Core Layout Components

#### Index Page ([src/pages/Index.tsx](mdc:src/pages/Index.tsx))
The main dashboard page that serves as the application's primary interface:
- **Purpose**: Central hub displaying AI tracking statistics and navigation
- **Features**: 
  - Header with search functionality
  - Statistics cards (LLMs, TTS, Image, Video models, Organizations, Years)
  - Tab-based navigation (Timeline, Organizations, Dashboard)
  - Gradient design theme (blue to purple)
- **State**: Manages search term state for filtering across components
- **Key Props**: Passes `searchTerm` to child components for filtering

### Feature Components

#### InteractiveTimeline ([src/components/InteractiveTimeline.tsx](mdc:src/components/InteractiveTimeline.tsx))
Timeline visualization for AI model releases and milestones:
- **Purpose**: Display chronological view of India's AI development (2020-2025)
- **Features**: Interactive timeline with model releases, company milestones
- **Props**: `searchTerm` for filtering timeline events
- **Data**: Contains hardcoded AI model data and company milestones
- **UI**: Uses cards, badges, and timeline visualization

#### CompanyProfiles ([src/components/CompanyProfiles.tsx](mdc:src/components/CompanyProfiles.tsx))
Organization profiles and details display:
- **Purpose**: Showcase 20+ Indian AI organizations and their contributions
- **Features**: Company cards with details about their AI models and achievements
- **Props**: `searchTerm` for filtering companies
- **Data**: Contains organization information, models, and achievements
- **UI**: Grid layout with company cards, badges for model types

#### ProgressDashboard ([src/components/ProgressDashboard.tsx](mdc:src/components/ProgressDashboard.tsx))
Analytics and metrics dashboard:
- **Purpose**: Display progress metrics, charts, and analytics
- **Features**: Charts, progress bars, analytics widgets
- **Data**: AI industry metrics and trends
- **UI**: Uses recharts for data visualization, progress indicators

### Application Structure

#### App Component ([src/App.tsx](mdc:src/App.tsx))
Main application wrapper with providers and routing:
- **Providers**: QueryClient, TooltipProvider
- **Notifications**: Toast and Sonner systems
- **Routing**: React Router with Index and NotFound routes
- **Global**: Sets up global UI providers and error boundaries

#### NotFound Component ([src/pages/NotFound.tsx](mdc:src/pages/NotFound.tsx))
404 error page for unmatched routes:
- **Purpose**: Handle navigation to non-existent pages
- **Features**: User-friendly error message with navigation back to home

## Data Architecture

### Data Sources
- **Static Data**: All AI model and company data is currently hardcoded in components
- **Future**: Can be extended to use APIs with React Query integration already set up

### Search & Filtering
- **Search State**: Managed in Index component and passed down
- **Filter Logic**: Implemented in each component based on search term
- **Scope**: Searches across model names, company names, descriptions

### State Management Pattern
```tsx
// Parent component manages search state
const [searchTerm, setSearchTerm] = useState("");

// Passes to child components
<ChildComponent searchTerm={searchTerm} />

// Child components filter their data
const filteredData = data.filter(item => 
  item.name.toLowerCase().includes(searchTerm.toLowerCase())
);
```

## Component Communication

### Props Pattern
- **Down**: Data and search terms flow down through props
- **Up**: Event handlers passed down, state updates bubble up
- **Filtering**: Central search state shared across components

### Styling Consistency
- **Theme**: Blue to purple gradient theme throughout
- **Cards**: Consistent card pattern with shadow and hover effects
- **Responsive**: Mobile-first design approach
- **Icons**: Lucide React icons for consistency

## Performance Considerations

### Current Optimizations
- React Query setup for future API integration
- Efficient filtering with JavaScript array methods
- Responsive design for mobile performance

### Future Improvements
- React.memo() for expensive re-renders
- Lazy loading for large datasets
- Virtual scrolling for long lists
- API integration with caching

## Extension Points

### Adding New Features
1. **New AI Categories**: Add to stats array and create new filter types
2. **New Companies**: Extend company data structure in CompanyProfiles
3. **New Metrics**: Add to ProgressDashboard with new chart types
4. **New Routes**: Add to App.tsx routing configuration

### API Integration
- Replace hardcoded data with React Query hooks
- Add loading and error states
- Implement real-time updates
- Add data mutation capabilities
