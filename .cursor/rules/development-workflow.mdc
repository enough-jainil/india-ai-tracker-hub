---
description: 
globs: 
alwaysApply: false
---
# Development Workflow

## Getting Started

### Prerequisites
- Node.js (recommended: use nvm for version management)
- npm or bun package manager
- VS Code or preferred IDE with TypeScript support

### Setup Commands
```bash
# Clone the repository
git clone <repository-url>
cd india-ai-tracker-hub

# Install dependencies
npm install
# or
bun install

# Start development server
npm run dev
# or
bun run dev

# Open http://localhost:5173 in browser
```

## Development Commands

### Core Scripts (from [package.json](mdc:package.json))
- `npm run dev` - Start Vite development server with hot reload
- `npm run build` - Production build for deployment
- `npm run build:dev` - Development build with dev mode
- `npm run lint` - Run ESLint for code quality checks
- `npm run preview` - Preview production build locally

### Build Configuration
- **Build Tool**: Vite configured in [vite.config.ts](mdc:vite.config.ts)
- **TypeScript**: Configured in [tsconfig.json](mdc:tsconfig.json) and [tsconfig.app.json](mdc:tsconfig.app.json)
- **ESLint**: Configured in [eslint.config.js](mdc:eslint.config.js)
- **Tailwind**: Configured in [tailwind.config.ts](mdc:tailwind.config.ts) and [postcss.config.js](mdc:postcss.config.js)

## File Structure Guidelines

### Adding New Components
1. **Page Components**: Add to [src/pages/](mdc:src/pages)
   ```tsx
   // src/pages/NewPage.tsx
   const NewPage = () => {
     return <div>New Page</div>;
   };
   export default NewPage;
   ```

2. **Feature Components**: Add to [src/components/](mdc:src/components)
   ```tsx
   // src/components/NewFeature.tsx
   import { Card } from "@/components/ui/card";
   
   interface NewFeatureProps {
     // Define props
   }
   
   export const NewFeature = ({ ...props }: NewFeatureProps) => {
     return <Card>Feature Content</Card>;
   };
   ```

3. **UI Components**: Add to [src/components/ui/](mdc:src/components/ui) (shadcn/ui components)

4. **Custom Hooks**: Add to [src/hooks/](mdc:src/hooks)
   ```tsx
   // src/hooks/use-custom-hook.ts
   import { useState, useEffect } from "react";
   
   export const useCustomHook = () => {
     // Hook logic
   };
   ```

### Adding New Routes
1. Import the component in [App.tsx](mdc:src/App.tsx)
2. Add route to the Routes component:
   ```tsx
   <Route path="/new-page" element={<NewPage />} />
   ```

## Code Quality Standards

### TypeScript
- Always use TypeScript for new files
- Define proper interfaces and types
- Enable strict mode in TypeScript config
- Use proper type assertions and guards

### Linting & Formatting
- Run `npm run lint` before committing
- Fix ESLint errors and warnings
- Use Prettier for consistent formatting
- Follow the established code style

### Component Standards
- Use functional components with hooks
- Implement proper prop types/interfaces
- Add JSDoc comments for complex components
- Follow the established naming conventions

## Testing Strategy (Future Implementation)

### Recommended Testing Setup
- **Unit Tests**: Jest + React Testing Library
- **E2E Tests**: Playwright or Cypress
- **Component Tests**: Storybook for isolated component testing

### Test File Structure
```
src/
  components/
    __tests__/
      Component.test.tsx
    Component.tsx
```

## Deployment Workflow

### Lovable Platform
- **Primary**: Deploy via Lovable platform interface
- **Automatic**: Changes pushed to git auto-deploy to Lovable
- **Domain**: Custom domain can be connected via Project > Settings > Domains

### Manual Deployment
```bash
# Build for production
npm run build

# Preview build locally
npm run preview

# Deploy dist/ folder to hosting platform
```

## Data Management

### Current Data Structure
- Static data hardcoded in components
- Search and filtering handled client-side
- No backend API integration yet

### Future API Integration
1. **Setup**: Create API service files in `src/services/`
2. **React Query**: Use existing setup for data fetching
3. **Types**: Define API response types
4. **Error Handling**: Implement proper error boundaries

## Performance Optimization

### Development Best Practices
- Use React DevTools for performance profiling
- Monitor bundle size with Vite build analysis
- Implement code splitting for large components
- Optimize images and assets

### Production Optimization
- Enable production builds for deployment
- Use React.memo() for expensive components
- Implement lazy loading for route components
- Optimize Tailwind CSS with purge

## Troubleshooting

### Common Issues
1. **Import Errors**: Check `@/` alias configuration in [vite.config.ts](mdc:vite.config.ts)
2. **Type Errors**: Verify TypeScript configuration and type definitions
3. **Style Issues**: Check Tailwind CSS configuration and imports
4. **Build Errors**: Run `npm run lint` and fix ESLint issues

### Debug Configuration
- Use browser DevTools for React debugging
- Enable source maps for better error tracking
- Use React Query DevTools for data fetching debugging

## Git Workflow

### Recommended Practices
- Create feature branches for new development
- Write descriptive commit messages
- Test locally before pushing
- Use conventional commits format

